var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');
var https = require('https');
var fs = require("fs");
var path = require('path');
const MongoClient = require('mongodb').MongoClient;
const global = require('../routes/global');


var port = normalizePort(process.env.PORT);
app.set('port', port);
// put options if any
const options = {};

var server = http.createServer(options, app);
const basePath = path.join(__dirname, `/../../public/videos`);
var db
const url = process.env.DB_URL;
MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, (err, client) => {
  if (err) return console.log(err)
  db = client.db(process.env.DB_NAME)
  app.locals.db = db;
   app.locals.client = client;
  server.listen(port, () => {
  })
})


//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
